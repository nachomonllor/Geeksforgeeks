
https://practice.geeksforgeeks.org/problems/earthquake-and-the-paint-shop4518/1/?page=1&difficulty[]=0&difficulty[]=1&status[]=unsolved&category[]=Map&sortBy=submissions


import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.stream.Collectors;


class alphanumeric {
    
    public String name;
    public int count;
    alphanumeric(String name, int count) {
        this.name = name;
        this.count = count;
    }
    
};

class Solution {
    
    static alphanumeric[] sortedStrings(int N, String A[]) {
        
        TreeMap<String, Integer> tm = new TreeMap();
        
        for(int i =0; i<N; i++) {
            if(tm.containsKey(A[i])) {
                tm.put(A[i], tm.get(A[i])+ 1);
            }
            else{
                tm.put(A[i], 1);
            }
        }
        int index = 0;
        
        alphanumeric [] res = new alphanumeric[tm.size()];
        
        for(Map.Entry<String,Integer> m : tm.entrySet()){
            
            res[index ++] = new alphanumeric(m.getKey(), m.getValue());
        }
        return res;
    }
    
    public static void main() {
        
        
    }

}



-----------------------------C++ -----------------------------



#include <iostream>
#include <vector>
#include <map>

using namespace std;

struct alphanumeric {
    string name;
    int count;
};

class Solution {
public:
    vector<alphanumeric> sortedStrings(int N, vector<string> A) {
        // code here
        map<string, int> m;

        for (int i = 0; i < N; i++) {
            m[A[i]]++;
        }

        vector<alphanumeric> ans;
        for (std::map<string, int>::iterator it = m.begin(); it != m.end(); it++) {
            alphanumeric alpha;
            alpha.name = it->first;
            alpha.count = it->second;
            ans.push_back(alpha);
        }

        return ans;
    }
};

int main()
{
    
    string A[] =
    { "2234597891 zmxvvxbcij 8800654113 jihgfedcba",
     "1234567891 zxyabcvapo 0123434908 padmadngaa",
     "1234567891 abcdefghij 9876543219 jihgfedcba",
     "2234597891 zmxvvxbcij 8800654113 jihgfedcba",
     "9120121291 zmxvvxbcij 0912114113 mnvxbedcba" };

    vector<string> vec;
    for (int i = 0; i < 5; i++) {
        vec.push_back(A[i]);
    }

    Solution sol;

    vector<alphanumeric> res = sol.sortedStrings(5, vec);

    for (int i = 0; i < res.size(); i++) {
        cout << res[i].name << ": " << res[i].count << endl;
    }

    return 0;
}



