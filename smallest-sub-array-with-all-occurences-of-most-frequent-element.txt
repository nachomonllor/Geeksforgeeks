

https://practice.geeksforgeeks.org/problems/smallest-sub-array-with-all-occurences-of-most-frequent-element/0/?category[]=Arrays&problemStatus=unsolved&difficulty[]=0&page=4&query=category[]ArraysproblemStatusunsolveddifficulty[]0page4#

#include <iostream>
#include <stdio.h>
#include <vector>
#include <map>

using namespace std;


vector<int> SmallestSubArrayWithAllOccurencesOfMostFrequentElement(vector<int> arr, int n) {

    //int* frec = (int*)calloc(10001, sizeof(int));
    //int frec[10001];
    //memset(frec, 0, sizeof(frec));
    std::vector<int> frec(10001, 0);


    for (int i = 0; i < n; i++) {
        frec[arr[i]]++;
    }

    int max_frec = 0;
    for (int i = 0; i < n; i++) {
        max_frec = std::max(max_frec, frec[arr[i]]);
    }

    //int ini[10001];
    //int fin[10001];

    //memset(ini, -1, sizeof(ini));
    //memset(fin, -1, sizeof(fin));

    vector<int> ini(10001, -1);
    vector<int> fin(10001, -1);

    for (int i = 0; i < n; i++) {
        if (frec[arr[i]] == max_frec) {
            if (ini[arr[i]] == -1) {
                ini[arr[i]] = i;
                fin[arr[i]] = i;
            }
            else {
                fin[arr[i]] = i;
            }
        }
    }


    int min = 10001;

    int indice_inicial = -1;
    int indice_final = -1;
    for (int i = 0; i < n; i++) {

        if (frec[arr[i]] == max_frec && fin[arr[i]] - ini[arr[i]] + 1 < min) {
            min = fin[arr[i]] - ini[arr[i]] + 1;
            indice_inicial = ini[arr[i]];
            indice_final = fin[arr[i]];
        }
    }

   // cout << "\n";

    vector<int> ans;

    for (int i = indice_inicial; i <= indice_final; i++) {
      //  cout << arr[i] << " ";
        ans.push_back(arr[i]);
    }

  //  cout << "\n";
    return ans;

}


int main()
{

    /*
    int arr[] = { 7248, 6769, 9206, 8827, 7156, 4948, 3365 ,7192, 8633, 9885, 2057, 3462, 879, 7972 ,3646 ,143 ,9446, 5395, 9266 };
    int size = sizeof(arr) / sizeof(int);

    vector<int> v;
    for (int i = 0; i < size; i++) {
        v.push_back(arr[i]);
    }

    vector<int> res = SmallestSubArrayWithAllOccurencesOfMostFrequentElement(v, size);
    for (int i = 0; i < res.size(); i++) {
        cout << res[i] << " ";
    }
    */

    /*
    int arr[] = { 4, 1, 1, 2, 2, 1, 3, 3 };
    //int arr[] = { 1, 2, 2, 3, 1 };
    int n = sizeof(arr) / sizeof(int);
    vector<int> v;
    for (int i = 0; i < n; i++) {
        v.push_back(arr[i]);
    }
    SmallestSubArrayWithAllOccurencesOfMostFrequentElement(v, n);
    */


    
    int t;
    cin >> t;

    while (t--) {
        int n;
        cin >> n;
        vector<int> arr;
        int elem;
        for (int i = 0; i < n; i++) {
            cin >> elem;
            arr.push_back(elem);
        }
        vector<int> v = SmallestSubArrayWithAllOccurencesOfMostFrequentElement(arr, n);
        for (int i = 0; i < v.size(); i++) {
            cout << v[i] << " ";
        }
        cout << "\n";

    }


   
    return 0;
}
