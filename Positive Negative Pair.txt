
https://practice.geeksforgeeks.org/problems/positive-negative-pair5209/1?page=1&status[]=unsolved&category[]=Hash&sortBy=submissions

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DriverCode
{

    class GFG
    {
        static void Main(string[] args)
        {
            int testcases;// Taking testcase as input
            testcases = Convert.ToInt32(Console.ReadLine());
            while (testcases-- > 0)// Looping through all testcases
            {

                int n = Convert.ToInt32(Console.ReadLine());
                int[] arr = new int[n];
                var ip = Console.ReadLine().Trim().Split(' ');
                for (int i = 0; i < n; i++)
                {
                    arr[i] = int.Parse(ip[i]);
                }
                Solution obj = new Solution();
                var res = obj.findPairs(arr, n);
                if (res.Count == 0) res.Add(0);
                foreach (int i in res)
                {
                    Console.Write(i + " ");
                }
                Console.WriteLine();
            }

        }
    }
}

// } Driver Code Ends


//User function Template for C#

class Solution
{
    //Function to return list containing all the pairs having both
    //negative and positive values of a number in the array.
    public List<int> findPairs(int[] arr, int n)
    {

        HashSet<int> hash = new HashSet<int>(arr);
        HashSet<int> ans = new HashSet<int>();

        for (int i = arr.Length - 1; i >= 0; i--)
        {
            if (arr[i] != 0 && hash.Contains(-arr[i]))
            {
                ans.Add(Math.Abs(arr[i]));
                ans.Add(-Math.Abs(arr[i]));
            }
        }

        List<int> lista = ans.ToList();
        lista.Reverse();
        return lista;


    }

}