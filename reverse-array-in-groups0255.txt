https://practice.geeksforgeeks.org/problems/reverse-array-in-groups0255/1

// { Driver Code Starts
import java.io.*;
import java.util.*;


 // } Driver Code Ends


class Reverse{
    
    static void ReverseSubArray(ArrayList<Integer> arr, int from, int to)
        {
            int i = from, j = to;

            while (i < j)
            {
                //int temp = arr[i];
                //arr[i] = arr[j];
                //arr[j] = temp;
                int temp = arr.get(i);
                arr.set(i, arr.get(j));
                arr.set(j, temp);

                i++;
                j--;
            }
        }

        public static ArrayList<Integer> reverseInGroups(ArrayList<Integer> mv, int n, int k)
        {

            int i = 0;

            for (; i + k <= n; i += k)
            {
                ReverseSubArray(mv, i, i + k - 1);
            }

            ReverseSubArray(mv, i, n - 1);
            return mv;
        }
    
}



// { Driver Code Starts.

class GFG {
    
	public static void main (String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int t = Integer.parseInt(br.readLine().trim()); //Inputting the testcases
		while(t-->0){
		    String inputLine1[] = br.readLine().trim().split(" ");
		    int n = Integer.parseInt(inputLine1[0]);
		    int k = Integer.parseInt(inputLine1[1]);
		    
		    ArrayList<Integer> mv = new ArrayList<>();
		    
		    String inputLine2[] = br.readLine().trim().split(" ");
		    for(int i=0; i<n; i++){
		        mv.add(Integer.parseInt(inputLine2[i]));
		    }
		    
		    Reverse obj = new Reverse();
		    
		    mv = obj.reverseInGroups(mv, n, k);
		    
		    StringBuffer str = new StringBuffer();
		    
		    for(int i=0; i<n; i++){
		        str.append(mv.get(i) + " ");
		    }
		    System.out.println(str);
		}
	}
}

  // } Driver Code Ends
